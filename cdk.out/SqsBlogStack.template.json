{
 "Resources": {
  "InventoryFunctionRoleF91DFE4E": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Description": "Role for Lambda functions",
    "RoleName": "InventoryFunctionRole",
    "Tags": [
     {
      "Key": "department",
      "Value": "inventory"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SqsBlogStack/InventoryFunctionRole/Resource"
   }
  },
  "InventoryFunctionRoleDefaultPolicyA6AB5999": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": "arn:aws:logs:*:*:*"
      },
      {
       "Action": [
        "sqs:DeleteMessage",
        "sqs:GetQueueAttributes",
        "sqs:ReceiveMessage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "InventoryUpdatesQueue278680F5",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "xray:PutTelemetryRecords",
        "xray:PutTraceSegments"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "InventoryUpdatesBucketFEAD6D23",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "InventoryUpdatesBucketFEAD6D23",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable",
        "dynamodb:GetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:PutItem",
        "dynamodb:Query",
        "dynamodb:Scan",
        "dynamodb:UpdateItem"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "InventoryUpdates8C5B878A",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "InventoryFunctionRoleDefaultPolicyA6AB5999",
    "Roles": [
     {
      "Ref": "InventoryFunctionRoleF91DFE4E"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SqsBlogStack/InventoryFunctionRole/DefaultPolicy/Resource"
   }
  },
  "InventoryUpdatesDlq1BD67306": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "Tags": [
     {
      "Key": "department",
      "Value": "inventory"
     }
    ],
    "VisibilityTimeout": 300
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "SqsBlogStack/InventoryUpdatesDlq/Resource"
   }
  },
  "InventoryUpdatesQueue278680F5": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "RedrivePolicy": {
     "deadLetterTargetArn": {
      "Fn::GetAtt": [
       "InventoryUpdatesDlq1BD67306",
       "Arn"
      ]
     },
     "maxReceiveCount": 5
    },
    "Tags": [
     {
      "Key": "department",
      "Value": "inventory"
     }
    ],
    "VisibilityTimeout": 300
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "SqsBlogStack/InventoryUpdatesQueue/Resource"
   }
  },
  "InventoryUpdatesQueuePolicy472E17AB": {
   "Type": "AWS::SQS::QueuePolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sqs:SendMessage",
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "InventoryFunctionRoleF91DFE4E",
          "Arn"
         ]
        }
       },
       "Resource": {
        "Fn::GetAtt": [
         "InventoryUpdatesQueue278680F5",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Queues": [
     {
      "Ref": "InventoryUpdatesQueue278680F5"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SqsBlogStack/InventoryUpdatesQueue/Policy/Resource"
   }
  },
  "InventoryUpdates8C5B878A": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "KeySchema": [
     {
      "AttributeName": "id",
      "KeyType": "HASH"
     }
    ],
    "AttributeDefinitions": [
     {
      "AttributeName": "id",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "Tags": [
     {
      "Key": "department",
      "Value": "inventory"
     }
    ]
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "SqsBlogStack/InventoryUpdates/Resource"
   }
  },
  "InventoryUpdatesBucketFEAD6D23": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "Tags": [
     {
      "Key": "department",
      "Value": "inventory"
     }
    ]
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "SqsBlogStack/InventoryUpdatesBucket/Resource"
   }
  },
  "InventoryUpdatesBucketNotificationsBB1CD718": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "InventoryUpdatesBucketFEAD6D23"
    },
    "NotificationConfiguration": {
     "LambdaFunctionConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "LambdaFunctionArn": {
        "Fn::GetAtt": [
         "CSVProcessingToSQSFunction2609C743",
         "Arn"
        ]
       }
      }
     ]
    },
    "Managed": true
   },
   "DependsOn": [
    "InventoryUpdatesBucketAllowBucketNotificationsToSqsBlogStackCSVProcessingToSQSFunction38D76D397CB65CB9"
   ],
   "Metadata": {
    "aws:cdk:path": "SqsBlogStack/InventoryUpdatesBucket/Notifications/Resource"
   }
  },
  "InventoryUpdatesBucketAllowBucketNotificationsToSqsBlogStackCSVProcessingToSQSFunction38D76D397CB65CB9": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "CSVProcessingToSQSFunction2609C743",
      "Arn"
     ]
    },
    "Principal": "s3.amazonaws.com",
    "SourceAccount": {
     "Ref": "AWS::AccountId"
    },
    "SourceArn": {
     "Fn::GetAtt": [
      "InventoryUpdatesBucketFEAD6D23",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "SqsBlogStack/InventoryUpdatesBucket/AllowBucketNotificationsToSqsBlogStackCSVProcessingToSQSFunction38D76D39"
   }
  },
  "CSVProcessingToSQSFunction2609C743": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "3ec5513ee6fb5cd3f8d08d966f2d460b8159081e732e155d9408fa1452c028d7.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "InventoryFunctionRoleF91DFE4E",
      "Arn"
     ]
    },
    "Environment": {
     "Variables": {
      "SQS_QUEUE_URL": {
       "Ref": "InventoryUpdatesQueue278680F5"
      }
     }
    },
    "Handler": "CSVProcessingToSQSFunction.lambda_handler",
    "Runtime": "python3.8",
    "Tags": [
     {
      "Key": "department",
      "Value": "inventory"
     }
    ],
    "TracingConfig": {
     "Mode": "Active"
    }
   },
   "DependsOn": [
    "InventoryFunctionRoleDefaultPolicyA6AB5999",
    "InventoryFunctionRoleF91DFE4E"
   ],
   "Metadata": {
    "aws:cdk:path": "SqsBlogStack/CSVProcessingToSQSFunction/Resource",
    "aws:asset:path": "asset.3ec5513ee6fb5cd3f8d08d966f2d460b8159081e732e155d9408fa1452c028d7",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SqsBlogStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SqsBlogStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\n\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    bucket = props[\"BucketName\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    request_type = event[\"RequestType\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    stack_id = event['StackId']\n\n    if managed:\n      config = handle_managed(request_type, notification_configuration)\n    else:\n      config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)\n\n    put_bucket_notification_configuration(bucket, config)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration):\n  external_notifications = find_external_notifications(bucket, stack_id)\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  def with_id(notification):\n    notification['Id'] = f\"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}\"\n    return notification\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef find_external_notifications(bucket, stack_id):\n  existing_notifications = get_bucket_notification_configuration(bucket)\n  external_notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return external_notifications\n\ndef get_bucket_notification_configuration(bucket):\n  return s3.get_bucket_notification_configuration(Bucket=bucket)\n\ndef put_bucket_notification_configuration(bucket, notification_configuration):\n  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "SqsBlogStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "InventoryUpdatesTopic4039DDB4": {
   "Type": "AWS::SNS::Topic",
   "Properties": {
    "Tags": [
     {
      "Key": "department",
      "Value": "inventory"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SqsBlogStack/InventoryUpdatesTopic/Resource"
   }
  },
  "OldInventoryUpdatesAlarmE1446499": {
   "Type": "AWS::CloudWatch::Alarm",
   "Properties": {
    "ComparisonOperator": "GreaterThanOrEqualToThreshold",
    "EvaluationPeriods": 1,
    "AlarmActions": [
     {
      "Ref": "InventoryUpdatesTopic4039DDB4"
     }
    ],
    "AlarmName": "OldInventoryUpdatesAlarm",
    "Dimensions": [
     {
      "Name": "QueueName",
      "Value": {
       "Fn::GetAtt": [
        "InventoryUpdatesQueue278680F5",
        "QueueName"
       ]
      }
     }
    ],
    "MetricName": "ApproximateAgeOfOldestMessage",
    "Namespace": "AWS/SQS",
    "Period": 300,
    "Statistic": "Maximum",
    "Threshold": 600
   },
   "Metadata": {
    "aws:cdk:path": "SqsBlogStack/OldInventoryUpdatesAlarm/Resource"
   }
  },
  "SQSToDynamoDBFunction69EA289A": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "3ec5513ee6fb5cd3f8d08d966f2d460b8159081e732e155d9408fa1452c028d7.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "InventoryFunctionRoleF91DFE4E",
      "Arn"
     ]
    },
    "Environment": {
     "Variables": {
      "DYNAMODB_TABLE_NAME": {
       "Ref": "InventoryUpdates8C5B878A"
      }
     }
    },
    "Handler": "SQSToDynamoDBFunction.lambda_handler",
    "Runtime": "python3.8",
    "Tags": [
     {
      "Key": "department",
      "Value": "inventory"
     }
    ],
    "TracingConfig": {
     "Mode": "Active"
    }
   },
   "DependsOn": [
    "InventoryFunctionRoleDefaultPolicyA6AB5999",
    "InventoryFunctionRoleF91DFE4E"
   ],
   "Metadata": {
    "aws:cdk:path": "SqsBlogStack/SQSToDynamoDBFunction/Resource",
    "aws:asset:path": "asset.3ec5513ee6fb5cd3f8d08d966f2d460b8159081e732e155d9408fa1452c028d7",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "SQSToDynamoDBFunctionMyQueueTrigger7EA3454D": {
   "Type": "AWS::Lambda::EventSourceMapping",
   "Properties": {
    "FunctionName": {
     "Ref": "SQSToDynamoDBFunction69EA289A"
    },
    "BatchSize": 10,
    "EventSourceArn": {
     "Fn::GetAtt": [
      "InventoryUpdatesQueue278680F5",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "SqsBlogStack/SQSToDynamoDBFunction/MyQueueTrigger/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/2WQyW7DIBCGnyV3Ms3SQ6+J1dyqpnbu0RhIQs3ieqCWhXj3CpwuUi/83yz6Z4YNPD3CaoEjLbnollq1EBuPvGM40jkqNBBrpyWrLrbo0WnFpxzOlBh9EMS3IENpmqG8v61/wsTEZNE40UI8YTs7F0iMthD3gXfS5+SdZtkjycQ0mlYgxDxdDkYRKWfZIVjuM1QX+8PPn9L6xoWByxfse2Wvufw/m6eekUh6gl0WRpYgnlyveFktQ2JcuyBG9PwGcadxMLlWICVWSyqW5ZO+uZg1Hq/30a/B96EcVjkrVF4ysePkb84+bGG9gvVm8U5KLYdgvTIS6lm/AIL/jFKiAQAA"
   },
   "Metadata": {
    "aws:cdk:path": "SqsBlogStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Outputs": {
  "S3BucketName": {
   "Value": {
    "Ref": "InventoryUpdatesBucketFEAD6D23"
   }
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}